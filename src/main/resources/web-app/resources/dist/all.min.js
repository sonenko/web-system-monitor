angular.module("app", [
  "ngRoute",
  "angular-loading-bar",
  "ngAnimate",
  "ngResource",
  "ui.grid",
  "ui.grid.edit",
  "ui.grid.selection",
  "ui.grid.rowEdit",
  "ui.grid.cellNav"])
  .config(["$routeProvider", function ($routeProvider) {
    var rootFolder = "src/app/";

    $routeProvider
      .when("/user", {
        templateUrl: rootFolder + "views/grid.html",
        controller: "GridCtrl"
      })
      .when("/administrator", {
        templateUrl: rootFolder + "views/grid.html",
        controller: "GridCtrl"
      })
      .when("/configuration", {
        templateUrl: rootFolder + "views/configuration.html",
        controller: "ConfigurationCtrl"
      })
      .otherwise({
        redirectTo: "/user"
      });
  }])

  .factory("CurPageService", ["$rootScope", "$location", function ($rootScope, $location) {
    return {
      isAdministrator: function () {
        return $location.path().substring(1) === "administrator"
      },
      isUser: function () {
        return $location.path().substring(1) === "user"
      },
      isConfiguration: function () {
        return $location.path().substring(1) === "configuration"
      }
    };
  }])

  .controller("AppController", ["$scope", "$interval", "CurPageService",
    function ($scope, $interval, CurPageService) {

      $scope.curPage = CurPageService;
      $scope.intervals = [];
      $scope.watchInterval = function (interval) {$scope.intervals.push(interval);}

      $scope.cancelPrevIntervals = function () {
        _.forEach($scope.intervals, function (interval) {
          $interval.cancel(interval);
        });
        $scope.intervals = [];
      };

      $scope.config = {
        maxCpu: 10,
        refreshRate: 1000
      }
    }]);

angular.module("app")
  .controller("GridCtrl", function ($scope, CurPageService, ProcessesService, $interval) {

    $scope.config.maxCpu = parseInt($scope.config.maxCpu, 10);

    $scope.gridOptions = {
      enableFiltering: true,
      columnDefs: [
        {field: 'taskName', displayName: 'Task Name', enableCellEdit: false},
        {field: 'user', displayName: 'User', enableCellEdit: false},
        {field: 'cpu', displayName: 'Processor %', enableCellEdit: false,
          cellClass: function(grid, row, col, rowRenderIndex, colRenderIndex) {
            if (grid.getCellValue(row,col) > $scope.config.maxCpu) return 'red';
          }
        },
        {field: 'memory', displayName: 'Memory %', enableCellEdit: false},
        {field: 'description', displayName: 'Description', enableCellEdit: false}
      ],
      sortInfo: {
        fields: ['cpu'],
        directions: ['desc']
      },
      data: $scope.data
    };

    function apiPath() {
      return CurPageService.isAdministrator() ? "info" : "userinfo";
    }


    function refresh() {
      ProcessesService.userProcesses(apiPath(), function (data) {
        $scope.gridOptions.data = data
      });
    }
    refresh();
    var interval = $interval(refresh, parseInt($scope.config.refreshRate, 10));
    $scope.cancelPrevIntervals();
    $scope.watchInterval(interval);
  })

  .controller("ConfigurationCtrl", function ($scope) {
    $scope.cancelPrevIntervals();
  });

angular.module("app")
  .factory("ProcessesService", function ($http) {
    return {
      userProcesses: function (path, fn) {
        $http.get("/api/" + path)
          .success(fn)
          .error(function (error) {console.error("there was server error: " + error)});
      },
      processes: function (path, fn) {
        $http.get("/api/" + path)
          .success(fn)
          .error(function (error) {console.error("there was server error: " + error)});
      }
    }
  });

//# sourceMappingURL=all.min.js.map